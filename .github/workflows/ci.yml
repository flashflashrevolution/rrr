name: CI

on:
  pull_request:
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "LICENCE"
      - ".github/workflows/code-coverage.yml"
  push:
    branches: [main]
    paths-ignore:
      - "*.md"
      - ".vscode/**"
      - "LICENCE"
      - ".github/workflows/code-coverage.yml"

env:
  CARGO_TERM_VERBOSE: true
  RUST_BACKTRACE: 1
  RUSTFLAGS: -Dwarnings

jobs:
  rustfmt:
    name: Rustfmt check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install rust stable
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true

      - name: ⚡ Cache
        uses: actions/cache@v3.0.1
        if: ${{ !env.ACT }}
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libegl1-mesa-dev xorg-dev libasound2-dev

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          components: llvm-tools-preview

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace

  clippy:
    name: Clippy check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true

      - name: ⚡ Cache
        uses: actions/cache@v3.0.1
        if: ${{ !env.ACT }}
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-clippy-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          components: llvm-tools-preview, clippy

      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libegl1-mesa-dev xorg-dev libasound2-dev

      - name: Clippy
        run: cargo clippy --workspace -- -D warnings

  docs:
    name: Deploy docs
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [rustfmt, test, clippy]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true

      - name: ⚡ Cache
        uses: actions/cache@v3.0.1
        if: ${{ !env.ACT }}
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target
          key: ${{ runner.os }}-docs-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust stable
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          components: llvm-tools-preview

      - name: API docs
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --workspace --no-deps

      - name: Deploy API docs
        uses: peaceiris/actions-gh-pages@v3.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          destination_dir: api

      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1.1.14
        with:
          mdbook-version: latest

      - name: Book
        run: mdbook build docs

      - name: Deploy book
        uses: peaceiris/actions-gh-pages@v3.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/book
          destination_dir: book
